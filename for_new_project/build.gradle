plugins {
	id 'war'
	id 'org.gretty' version '3.1.1'
	id 'org.owasp.dependencycheck' version '10.0.2'
}

ext {
	core_version = '@CORE_VERSION@'
	build_version = 'build_version'
	war_name = 'clearth.war'
	
	jetty_9_4 = 'jetty9.4'
	jetty_12 = 'jetty12'
	
	if (project.hasProperty('revision')) {
		build_version = revision
	}
	
	if (!project.hasProperty('checkApiKey')) {
		checkApiKey = ''
	}
	if (!project.hasProperty('knownExploitedVulnerabilitiesUrl')) {
		knownExploitedVulnerabilitiesUrl = null
	}
	
	if (!project.hasProperty('server'))
		server = jetty_9_4
	
	if (server == jetty_9_4) {
		def version = jetty94Version
		jettyName = "jetty-distribution-${version}"
		jettyUrl = "https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/${version}/${jettyName}.zip"
	}
	else if (server == jetty_12) {
		def version = jetty12Version
		jettyName = "jetty-home-${version}"
		jettyUrl = "https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-home/${version}/${jettyName}.zip"
	}
	else
		throw new GradleException("'server' must be '${jetty_9_4}' or '${jetty_12}'")
	
	jettyHome = 'jetty/jetty-home'
}

repositories {
	maven {
		name "SharedDir" // for local builds only
		url file("@CORE_SHARED_DIR@")
	}
	mavenCentral()
}

dependencies {
	implementation "com.exactprosystems.clearth:clearth-core:${core_version}"
	implementation "com.exactprosystems.clearth:clearth-gui:${core_version}"
}

configurations {
	all {
		exclude group: 'com.google.guava', module: 'guava-jdk5'
	}
}


static def getDate(String format) {
	def date = new Date()
	def formattedDate = date.format(format)
	return formattedDate
}


/*** Tasks ***/

war {
	//Faster WAR creation
	entryCompression = org.gradle.api.tasks.bundling.ZipEntryCompression.STORED
	archiveFileName = war_name
	manifest {
		attributes('Implementation-Title': 'Application based on ClearTH Core')
		attributes('Implementation-Vendor': 'Exactpro Systems LLC')
		attributes('Implementation-Vendor-Id': 'com.exactprosystems')
		attributes('Implementation-Version': "${build_version}|" + getDate('dd/MM/yyyy'))
	}
}

gretty {
	contextPath = "clearth"
	webInfIncludeJarPattern = '.*clearth.*jar$|.*primefaces.*jar$|.*jsf.*jar$|.*freemarker.*jar$'
	servletContainer = 'jetty9.4'
	serverConfigFile = 'jetty94.xml'
}

task downloadJetty(type: JavaExec,
		group: 'ClearTH',
		dependsOn: 'downloadJettyDistribution') {
	workingDir = file('jetty')
	classpath = files("${jettyHome}/start.jar")
	mainClass = 'org.eclipse.jetty.start.Main'
	if (server == jetty_9_4)
		args '--add-to-start=server,http,deploy,apache-jsp,websocket'
	else if (server == jetty_12)
		args '--add-modules=server,http,ee8-deploy,ee8-apache-jsp,ee8-websocket-javax'
}

task downloadJettyDistribution() {
	def f = new File(projectDir, jettyHome)
	def jettyZip = new File(f, "${jettyName}.zip")
	
	doLast {
		def url = new URL(jettyUrl)
		f.mkdirs()
		
		println('Downloading Jetty: ' + url)
		url.withInputStream { i -> jettyZip.withOutputStream { it << i } }
		
		println('Unpacking Jetty')
		copy {
			from zipTree(jettyZip)
			into f
		}
		
		def unzipped = new File(f, jettyName)
		copy {
			from (unzipped) {
				exclude 'demo-base'
			}
			into f
		}
		
		def work = new File(projectDir, 'jetty/work')
		println 'Creating directory ' + work
		work.mkdirs()
		
		println 'Removing temporary files'
		delete jettyZip
		delete unzipped
	}
}


task copyWar(type: Copy, dependsOn: war) {
	from "build/libs/${war_name}"
	into 'jetty/webapps/'
}

task runClearTH(type: JavaExec, 
		group: 'ClearTH', 
		description: 'Builds WAR file, deploys it to Jetty and starts Jetty with remote debugging enabled', 
		dependsOn: copyWar) {
	workingDir = file('jetty')
	classpath = files("${jettyHome}/start.jar")
	mainClass = 'org.eclipse.jetty.start.Main'
	//debug = true
	jvmArgs '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'
}

task buildRelease(type: Copy, group: 'ClearTH',
		description: 'Builds ClearTH release to run within Jetty, i.e. WAR file and configuration',
		dependsOn: copyWar) {
	from '.'
	include "jetty/webapps/${war_name}"
	include 'cfg/**/*'
	
	into "${buildDir}/dist"
}

def buildFullRelease = tasks.register('buildFullRelease') {
	group 'ClearTH'
	description 'Builds full ClearTH release to run within Jetty, i.e. it includes Jetty itself, configuration files and WAR file in proper location'
	dependsOn buildRelease
	dependsOn downloadJetty
	
	doLast {
		def distDir = "${buildDir}/dist"
		copy {
			from ('jetty/') {
				exclude 'webapps'
			}
			into "${distDir}/jetty/"
		}
	}
}

dependencyCheck {
	skipConfigurations = ['grettyProductRuntime', 'grettyStarter', 
		'grettyRunnerJetty93', 'grettyRunnerJetty94', 'grettyRunnerJetty7', 'grettyRunnerJetty8', 'grettyRunnerJetty9', 'grettyRunnerJetty10', 
		'grettyRunnerTomcat85', 'grettyRunnerTomcat7', 'grettyRunnerTomcat8', 'grettyRunnerTomcat9', 
		'grettyNoSpringBoot', 'grettySpringLoaded', 'gretty']
	format = 'ALL'
	failBuildOnCVSS = 7.6
	nvd {
		apiKey = checkApiKey
	}
	analyzers {
		knownExploitedURL = knownExploitedVulnerabilitiesUrl
	}
}

wrapper {
	gradleVersion = '8.8'
}
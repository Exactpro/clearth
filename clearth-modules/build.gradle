import org.xml.sax.SAXParseException

import java.util.concurrent.Callable

ext {
    cthImpl = 'implementation "com.exactprosystems.clearth:clearth-core'
    installationFiles = "${projectDir}/installation"
}

def checkCthDir(clearthDir) {
    if (clearthDir == undef)
        throw new GradleException("You must set 'clearthDir' property via '-PclearthDir=<path_to_clearth_project>' key")
    if (!file(clearthDir).exists())
        throw new GradleException("ClearTH project directory '${clearthDir}' does not exist")
    if (!file("${clearthDir}/build.gradle").text.contains(cthImpl))
        throw new GradleException("Not a ClearTH project directory: no '${cthImpl}\"' in project's 'build.gradle'")
}

def checkCodecsFile(clearthDir) {
    if (file("${clearthDir}/cfg/codecs.xml").exists()) {
        println("- This project already contains a codec config file")
    } else {
        copy {
            from("${installationFiles}/codecs.xml")
            into "$clearthDir/cfg"
        }
        println("- Default codec config file added to project: ${clearthDir}/cfg/codecs.xml")
    }
}

def putCodec(codecValue, codecName, clearthDir) {
    checkCodecsFile(clearthDir)

    ant.replaceregexp(match: '</CodecConfigs>', replace: "${codecValue}\n</CodecConfigs>") {
        fileset(dir: "${clearthDir}/cfg/", includes: 'codecs.xml')
    }
    println("- ${codecName} codec config added to project's codec config file: ${clearthDir}/cfg/codecs.xml")
}

def putDictionary(dictName, dictPath, clearthDir) {
    if (file("${clearthDir}/cfg/dicts/${dictName}").exists()) {
        println("- Message dictionary already exists in project: ${clearthDir}/cfg/dicts/${dictName}")
    } else {
        copy {
            from(dictPath)
            into "${clearthDir}/cfg/dicts"
        }
        println("- Empty message dictionary added to project: ${clearthDir}/cfg/dicts/${dictName}")
    }
}

def putActions(clearthDir, actions) {
    def mappingPath = "${clearthDir}/cfg/actionsmapping.cfg"
    def mapping = file(mappingPath)
    mapping.append("\n${actions}")
    println("- Actions added to project's actions mapping: ${mappingPath}")
}

def putImplementation(moduleImpl, clearthDir) {
    ant.replaceregexp(match: "${cthImpl}", replace: "implementation \"${moduleImpl}:\${core_version}\"\n\t${cthImpl}") {
        fileset(dir: "${clearthDir}", includes: 'build.gradle')
    }
    println("- Module dependency added to project's 'build.gradle' file: ${moduleImpl}")
}

def putFile(fileName, source, destination) {
    def copiedFile = "${destination}/${fileName}"
    if (file(copiedFile).exists()) {
        println("- File already exists in project: ${copiedFile}")
    } else {
        def destDir = new File(copiedFile).getParentFile()
        destDir.mkdirs()
        copy {
            from ("${source}/${fileName}")
            into destDir
        }
        println("- File copied to project: ${copiedFile}")
    }
}

def getClearThCfg(clearthDir) {
    File cfg = new File("${clearthDir}/cfg/clearth.cfg")
    if (!cfg.exists())
        throw new GradleException("File clearth.cfg doesn't exist in ${clearthDir}/cfg")
    return cfg
}

def getClearThRootNode(File clearThCfg) {
    Node rootNode
    try {
        rootNode = new XmlParser().parse(clearThCfg)
    }
    catch (SAXParseException | IOException e) { // is thrown when clearth.cfg is not valid XML file or cannot be read
        throw new GradleException("Error occurred while reading clearth.cfg file as XML: " + e.getMessage(), e)
    }
    if (rootNode.name() != 'ClearThConfiguration')
        throw new GradleException("Root tag 'ClearThConfiguration' not found in clearth.cfg (found '${rootNode.name()}' instead)")
    return rootNode
}

def updateClearThCfg(File clearThCfg, Node updatedRootNode) {
    XmlNodePrinter printer = new XmlNodePrinter(new IndentPrinter(new FileWriter(clearThCfg), '\t'))
    printer.setPreserveWhitespace(true)
    printer.print(updatedRootNode)
}

/**
 * adds type to clearth.cfg under &lt;connectivity> - &lt;types> (and creates/expands them if necessary). For example, this:
 * <pre>
 * type = new Tuple4("FOO", "org.foobar.Foo", "connections/foo", ["org.foobar.Bar1", "org.foobar.Bar2"]
 * </pre>
 * Will result into adding this to clearth.cfg:
 * <pre>
 *     &lt;type>
 *         &lt;name>FOO&lt;/name>
 *         &lt;connectionClass>org.foobar.Foo&lt;/connectionClass>
 *         &lt;directory>connections/foo&lt;/directory>
 *         &lt;validationRules>
 *             &lt;ruleClass>org.foobar.Bar1&lt;/ruleClass>
 *             &lt;ruleClass>org.foobar.Bar2&lt;/ruleClass>
 *         &lt;/validationRules>
 *     &lt;/type>
 * </pre>
 * if array list is not specified then &lt;validationRules> tag won't be created.
 * @param typeToAdd type that should be added: first - name, second - connectionClass, third - directory
 * @param clearthDir directory with clearTh Project where type will be added (searched in cfg/clearth.cfg)
 * @throws GradleException if tag &lt;ClearThConfiguration> doesn't exist in clearth.cfg or file has incorrect xml structure
 */
def addConnectionTypeToCfg(Tuple4 typeToAdd, clearthDir) {
    File cfg = getClearThCfg(clearthDir)
    Node rootNode = getClearThRootNode(cfg)
    Node updatedRootNode = addConnectionTypeInfo(rootNode, typeToAdd)
    updateClearThCfg(cfg, updatedRootNode)
    
    println("- Type '${typeToAdd.getFirst()}' added to clearth.cfg")
}

static Node addConnectionTypeInfo(Node rootNode, Tuple4<String, String, String, List<String>> connectionTypeInfo) {
    Node connectivityNode = computeIfAbsent(rootNode, 'connectivity')
    Node typesNode = computeIfAbsent(connectivityNode, 'types')
    
    Node typeNode = typesNode.appendNode('type')
    typeNode.appendNode('name', connectionTypeInfo.first)
    typeNode.appendNode('connectionClass', connectionTypeInfo.second)
    typeNode.appendNode('directory', connectionTypeInfo.third)
    if (connectionTypeInfo && !connectionTypeInfo.isEmpty()) {
        Node rulesNode = typeNode.appendNode('validationRules')
        connectionTypeInfo.fourth.forEach {rulesNode.appendNode('ruleClass', it)}
    }
    return rootNode
}

static Node computeIfAbsent(Node parentNode, String childToAdd) {
    Node result = parentNode.get(childToAdd)?.getAt(0)
    if (!result) {
        result = parentNode.appendNode(childToAdd)
    }
    
    return result
}

def installModule(clearthDir, moduleName, moduleImpl, List<Callable> methodsToCall) {
    checkCthDir(clearthDir)

    if (file("${clearthDir}/build.gradle").text.contains(moduleImpl)) {
        println("${moduleName} module is already installed in project: ${clearthDir}")
        return
    }
    println("Installing ${moduleName} module in project: ${clearthDir}")
    
    methodsToCall?.forEach { it -> it.call() }
    
    putImplementation(moduleImpl, clearthDir)

    println("${moduleName} module has been installed")
}

def installMsgModule(clearthDir, moduleName, moduleImpl, moduleCodec, moduleDictName, moduleDictPath) {
    checkCthDir(clearthDir)

    if (file("${clearthDir}/build.gradle").text.contains(moduleImpl)) {
        println("${moduleName} module is already installed in project: ${clearthDir}")
        return
    }
    println("Installing ${moduleName} module in project: ${clearthDir}")

    putCodec(moduleCodec, moduleName, clearthDir)
    putDictionary(moduleDictName, moduleDictPath, clearthDir)
    putImplementation(moduleImpl, clearthDir)

    println("${moduleName} module has been installed")
}

def installConTypeModule(clearThDir, moduleName, moduleImpl, type) {
    installModule(clearThDir, moduleName, moduleImpl, [
            { addConnectionTypeToCfg(type, clearThDir) }
    ])
}
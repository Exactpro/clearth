generateJavaFromXsd {
	inputs.file file("${xsdDir}/json.xsd")

	outputs.files fileTree("${genJavaDir}/com/exactprosystems/clearth/connectivity/json").include('*.java')

	doLast {
		ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath)

		ant.xjc(schema: "${coreXsdDir}/message.xsd", binding: "${coreXsdDir}/message.xjb",
				destdir: "${genJaxbDir}", package: 'com.exactprosystems.clearth.connectivity.message',
				removeOldOutput: 'yes')
		{
			arg(value: "-episode")
			arg(value: "${genDir}/message.episode")
			produces(dir: "${genJaxbDir}/com/exactprosystems/clearth/connectivity/message", includes: '*')
		}

		ant.xjc(schema: "${xsdDir}/json.xsd",
				destdir: "${genJavaDir}", package: 'com.exactprosystems.clearth.connectivity.json',
				removeOldOutput: 'yes', extension: true)
		{
			arg(value: "-catalog")
			arg(value: "${coreXsdDir}/message.cat")
			arg(value: "-b")
			arg(value: "${genDir}/message.episode")
			produces(dir: "${genJavaDir}/com/exactprosystems/clearth/connectivity/json", includes: '*')
		}
	}
}

publishing {
	publications {
		json(MavenPublication) {
			groupId = "${group}"
			artifactId = 'clearth-json'
			version = "${version}"
			
			from components.java
		}
	}
}

artifactoryPublish {
	publications(publishing.publications.json)
}

ext {
	moduleName = 'JSON'
	moduleImpl = 'com.exactprosystems.clearth:clearth-json'
	moduleDict = "json.xml"
	if (!project.hasProperty('clearthDir'))
		clearthDir = undef
}

task installModule {
	doLast {
		def codec = file("${projectDir}/installation/codec.xml").text
		def dictPath = "${projectDir}/installation/dicts/${moduleDict}"
		def actions = file("${projectDir}/installation/actions.cfg").text
		
		installModule(clearthDir, moduleName, moduleImpl,
				[
					{ putCodec(codec, moduleName, clearthDir) },
					{ putDictionary(moduleDict, dictPath, clearthDir) },
					{ putActions(clearthDir, actions) }
				]
		)
	}
}